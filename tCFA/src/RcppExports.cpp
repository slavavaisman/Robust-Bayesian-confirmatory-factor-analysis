// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// NormalCFA
void NormalCFA(std::string inputFilePath, std::string modelString, std::string mcmcOutFilePath, std::string mcmcLatentOutFilePath, double alpha_prior, double beta_prior, double sigma_prior, double sigma_cross_loading_prior, double wishart_degree_freedom_prior, uint32_t burnin, uint32_t samples, int seed);
RcppExport SEXP _tCFA_NormalCFA(SEXP inputFilePathSEXP, SEXP modelStringSEXP, SEXP mcmcOutFilePathSEXP, SEXP mcmcLatentOutFilePathSEXP, SEXP alpha_priorSEXP, SEXP beta_priorSEXP, SEXP sigma_priorSEXP, SEXP sigma_cross_loading_priorSEXP, SEXP wishart_degree_freedom_priorSEXP, SEXP burninSEXP, SEXP samplesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFilePath(inputFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcOutFilePath(mcmcOutFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcLatentOutFilePath(mcmcLatentOutFilePathSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior(alpha_priorSEXP);
    Rcpp::traits::input_parameter< double >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_prior(sigma_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_cross_loading_prior(sigma_cross_loading_priorSEXP);
    Rcpp::traits::input_parameter< double >::type wishart_degree_freedom_prior(wishart_degree_freedom_priorSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    NormalCFA(inputFilePath, modelString, mcmcOutFilePath, mcmcLatentOutFilePath, alpha_prior, beta_prior, sigma_prior, sigma_cross_loading_prior, wishart_degree_freedom_prior, burnin, samples, seed);
    return R_NilValue;
END_RCPP
}
// StudentCFA
void StudentCFA(std::string inputFilePath, std::string modelString, std::string mcmcOutFilePath, std::string mcmcLatentOutFilePath, double alpha_prior, double beta_prior, double sigma_prior, double sigma_cross_loading_prior, double wishart_degree_freedom_prior, double max_t_degree_freedom_prior, uint32_t burnin, uint32_t samples, int seed);
RcppExport SEXP _tCFA_StudentCFA(SEXP inputFilePathSEXP, SEXP modelStringSEXP, SEXP mcmcOutFilePathSEXP, SEXP mcmcLatentOutFilePathSEXP, SEXP alpha_priorSEXP, SEXP beta_priorSEXP, SEXP sigma_priorSEXP, SEXP sigma_cross_loading_priorSEXP, SEXP wishart_degree_freedom_priorSEXP, SEXP max_t_degree_freedom_priorSEXP, SEXP burninSEXP, SEXP samplesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFilePath(inputFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcOutFilePath(mcmcOutFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcLatentOutFilePath(mcmcLatentOutFilePathSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior(alpha_priorSEXP);
    Rcpp::traits::input_parameter< double >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_prior(sigma_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_cross_loading_prior(sigma_cross_loading_priorSEXP);
    Rcpp::traits::input_parameter< double >::type wishart_degree_freedom_prior(wishart_degree_freedom_priorSEXP);
    Rcpp::traits::input_parameter< double >::type max_t_degree_freedom_prior(max_t_degree_freedom_priorSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    StudentCFA(inputFilePath, modelString, mcmcOutFilePath, mcmcLatentOutFilePath, alpha_prior, beta_prior, sigma_prior, sigma_cross_loading_prior, wishart_degree_freedom_prior, max_t_degree_freedom_prior, burnin, samples, seed);
    return R_NilValue;
END_RCPP
}
// NormalCalculateMargLikl
std::vector<double> NormalCalculateMargLikl(std::string inputFilePath, std::string modelString, std::string mcmcOutFilePath, std::string mcmcLatentOutFilePath, double alpha_prior, double beta_prior, double sigma_prior, double sigma_cross_loading_prior, double wishart_degree_freedom_prior, uint32_t samplesz, uint32_t replicationnumber);
RcppExport SEXP _tCFA_NormalCalculateMargLikl(SEXP inputFilePathSEXP, SEXP modelStringSEXP, SEXP mcmcOutFilePathSEXP, SEXP mcmcLatentOutFilePathSEXP, SEXP alpha_priorSEXP, SEXP beta_priorSEXP, SEXP sigma_priorSEXP, SEXP sigma_cross_loading_priorSEXP, SEXP wishart_degree_freedom_priorSEXP, SEXP sampleszSEXP, SEXP replicationnumberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFilePath(inputFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcOutFilePath(mcmcOutFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcLatentOutFilePath(mcmcLatentOutFilePathSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior(alpha_priorSEXP);
    Rcpp::traits::input_parameter< double >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_prior(sigma_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_cross_loading_prior(sigma_cross_loading_priorSEXP);
    Rcpp::traits::input_parameter< double >::type wishart_degree_freedom_prior(wishart_degree_freedom_priorSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type samplesz(sampleszSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type replicationnumber(replicationnumberSEXP);
    rcpp_result_gen = Rcpp::wrap(NormalCalculateMargLikl(inputFilePath, modelString, mcmcOutFilePath, mcmcLatentOutFilePath, alpha_prior, beta_prior, sigma_prior, sigma_cross_loading_prior, wishart_degree_freedom_prior, samplesz, replicationnumber));
    return rcpp_result_gen;
END_RCPP
}
// StudentCalculateMargLikl
std::vector<double> StudentCalculateMargLikl(std::string inputFilePath, std::string modelString, std::string mcmcOutFilePath, std::string mcmcLatentOutFilePath, double alpha_prior, double beta_prior, double sigma_prior, double sigma_cross_loading_prior, double wishart_degree_freedom_prior, double nu_max, uint32_t samplesz, uint32_t replicationnumber);
RcppExport SEXP _tCFA_StudentCalculateMargLikl(SEXP inputFilePathSEXP, SEXP modelStringSEXP, SEXP mcmcOutFilePathSEXP, SEXP mcmcLatentOutFilePathSEXP, SEXP alpha_priorSEXP, SEXP beta_priorSEXP, SEXP sigma_priorSEXP, SEXP sigma_cross_loading_priorSEXP, SEXP wishart_degree_freedom_priorSEXP, SEXP nu_maxSEXP, SEXP sampleszSEXP, SEXP replicationnumberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFilePath(inputFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type modelString(modelStringSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcOutFilePath(mcmcOutFilePathSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmcLatentOutFilePath(mcmcLatentOutFilePathSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior(alpha_priorSEXP);
    Rcpp::traits::input_parameter< double >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_prior(sigma_priorSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_cross_loading_prior(sigma_cross_loading_priorSEXP);
    Rcpp::traits::input_parameter< double >::type wishart_degree_freedom_prior(wishart_degree_freedom_priorSEXP);
    Rcpp::traits::input_parameter< double >::type nu_max(nu_maxSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type samplesz(sampleszSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type replicationnumber(replicationnumberSEXP);
    rcpp_result_gen = Rcpp::wrap(StudentCalculateMargLikl(inputFilePath, modelString, mcmcOutFilePath, mcmcLatentOutFilePath, alpha_prior, beta_prior, sigma_prior, sigma_cross_loading_prior, wishart_degree_freedom_prior, nu_max, samplesz, replicationnumber));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tCFA_NormalCFA", (DL_FUNC) &_tCFA_NormalCFA, 12},
    {"_tCFA_StudentCFA", (DL_FUNC) &_tCFA_StudentCFA, 13},
    {"_tCFA_NormalCalculateMargLikl", (DL_FUNC) &_tCFA_NormalCalculateMargLikl, 11},
    {"_tCFA_StudentCalculateMargLikl", (DL_FUNC) &_tCFA_StudentCalculateMargLikl, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_tCFA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
